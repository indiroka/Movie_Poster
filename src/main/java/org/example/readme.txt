База данных - совокупность данных, хранимых в соответствии со схемой данных и правилами
СУБД (Система Управления Базой Данных) - комплекс программ, позволяющих управлять базами данных

База данных отличаются от СУБД тем, что сами по себе базы данных предаставляют всего лишь файлы на компьютере:
Базы данных ничего не умеют делать с этими файлами самостоятельно - только хранить данные.
СУБД - программы, которые позволяют манипулировать этими данными и файлами.

Базы данных могут быть:
- сетевые база данных
- документоориентированные базы данных
- иерархические базы данных
- объектно-ориентированные базы данных
- реляционные базы данных
- нереляционные базы данных (NoSQL)
      - графовые базы данных
      - колоночные базы данных
     Apache Cassandra (CQL), Redis, MongoDB

Реляционные базы данных наиболее втречаютщийся тип база данных:
- Oracle, MySQL, MSSQL (Microsoft SQL Server), PosgreSQL

Сервернные база данных: Oracle, MySQL, MSSQL (Microsoft SQL Server), PosgreSQL
Встраиваемые базы данных (Embedded Database): SQLite, H2Database

Все базы данных имеют различную реализацию и способы общения с ней, для реляционных базы данных.
В Java для общения с базами данных используются стандарт JDBC(Java Database Connectivity).
Это некоторый API, которые скрывают от нас конкретную реализяция общения к базе данных и позволяет одинаково работать с этими базами данных.

Подключить к приложения JDBC драйвер.


----------------------------------------------------------
Для работы с базой данных для удобства используется ORM библиотека
В нашем примере это будет Hibernate

ORM библиотека сопоставляет поле классов с колонками в базе данных и автоматический их заполняет данными.

CRUD - Create, Read, Update, Delete
- select * from movie where id = 1
- select * from movie
- update
- delete
- insert

HQL - Hibernate Query Language

--------------------------------------------
Аннотация Hibernate для сзяки между классами и таблицами в базе данных
@Entity - помечает класс как связанный с таблицей в базе данных 9аннотация для класса)
@Table(name = "<имя таблицы>") - указывает на имя таблицы (аннотация для класса)

@Id - помечает поле как уникальный индентификатор (primary key) (аннотация для поля id)
@GeneratedValue(strategy = GenerationType.IDENTITY) - способ сохранения уникальных идентификаторв (аннотация для поля id)
@Column(name = "<имя колонки>") - указывает на имя колонки в базе данных

Связи между сущностями один-к-одному (OneToOne), один-ко-многим(ManyToOne, OneToOne), много-к-многим(ManyToMany)

@OneToOne
@JoinColumn(name = "parking_lot_id", referencesColumnName = "id")
+
@OneToOne(mappedBy = "parking_lot") примечание, указывается не имя столбца в базе данных, а название поле в классе

"ManyToOne"
@JoinColumn(name = "movie_id")
+
@OneToMany(mappedBy = "movie")

@ManyToMany
@JoinTable(
   name = "teacher_student",
   joinColumns = { @JoinColumn(name = "student_id"},
   inverseJoinColumns = { @JoinColumn(name = "teacher_id") }
)
+
@ManyToMany(mappedBy= "students") примечание, указывается не имя столбца в базе данных, а название поле в классе

----------------------------------------------------------
DAO - Data Access Object







